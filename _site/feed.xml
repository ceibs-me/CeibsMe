<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.0.0">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2019-11-29T15:48:09+08:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">Livid</title><subtitle>Beautifully Advance
</subtitle><author><name>Livid</name></author><entry><title type="html">Dark Mode</title><link href="http://localhost:4000/essays/2019/09/05/dark-mode.html" rel="alternate" type="text/html" title="Dark Mode" /><published>2019-09-05T00:00:00+08:00</published><updated>2019-09-05T00:00:00+08:00</updated><id>http://localhost:4000/essays/2019/09/05/dark-mode</id><content type="html" xml:base="http://localhost:4000/essays/2019/09/05/dark-mode.html">&lt;p&gt;大概是由于这两年&lt;a href=&quot;https://www.apple.com/pro-display-xdr/&quot;&gt;新的显示器&lt;/a&gt;的亮度越来越高，支持 Dark Mode，从操作系统到 App，再到网站，都已经变成一件用户和开发者都有强烈需求去做的事情。&lt;/p&gt;

&lt;p&gt;最近花了一些时间，对这个博客的 CSS 进行了一些小小的调整，现在也可以根据操作系统的设置，自动支持 Dark Mode 了。只是这样的支持，相比那些从一开始设计时就考虑到 Dark Mode 的设计，大概并不完美。Dark Mode 并不只是简简单单地把颜色 invert，而是需要考虑对比度及新设备（OLED）特性，全盘考虑的新设计。&lt;/p&gt;

&lt;p&gt;最近几年，在 &lt;a href=&quot;https://caniuse.com/&quot;&gt;Can I Use&lt;/a&gt; 上追踪最新的浏览器标准的进化，对我而言是一件非常有乐趣的事情。能够将这些新特性以恰当的方式在 &lt;a href=&quot;https://www.v2ex.com/&quot;&gt;V2EX&lt;/a&gt; 上实施，是一件非常有意思的事情。一个网站如果能够在前端和后端的技术上，都时刻保持更新，那么保持更新这个动作本身，无论是对于网站还是做这件事情人，都是有价值的。&lt;/p&gt;

&lt;p&gt;说到对新技术的支持，最近在 V2EX 上完成部署的一个新更新，就是现在 V2EX 可以支持通过 &lt;a href=&quot;https://jsonfeed.org/&quot;&gt;JSON Feed&lt;/a&gt; 将节点的最新内容输出。然后就可以通过支持 JSON Feed 的 RSS 阅读器，比如 &lt;a href=&quot;https://ranchero.com/netnewswire/&quot;&gt;NetNewsWire 5.0&lt;/a&gt; 或者 &lt;a href=&quot;https://feedbin.com/&quot;&gt;Feedbin&lt;/a&gt; 来订阅指定节点的最新内容。NetNewsWire 5.0 是新近发布的一款 RSS 阅读器，实现得简直就像是来自 Apple 的作品。&lt;/p&gt;

&lt;p&gt;下图是用 NetNewsWire 5.0 订阅 V2EX 的分享创造节点的效果：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://i.v2ex.co/30v518br.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;分享创造节点的 JSON Feed 地址：&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://ranchero.com/netnewswire/&quot;&gt;https://www.v2ex.com/feed/create.json&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;这种阅读 V2EX 内容的方式会和直接访问网站很不一样：所有的内容以创建时间排序，不会受到排序算法的影响。用户可以使用一款自己喜欢的 Native App 来指定订阅自己真正感兴趣的内容，很多杂音会在这个过程中被排除。同时 JSON Feed 的输出中也不会有广告。是的，我想我永远不会去在 JSON Feed 中加广告，我希望就去保持一个尽可能纯粹的内容输出格式。如果有一天有更多的人通过这种方式来阅读 V2EX 上的内容，我会觉得这些选择帮助他们节省了时间，会很有意义。&lt;/p&gt;</content><author><name>Livid</name></author><category term="essays" /><summary type="html">大概是由于这两年新的显示器的亮度越来越高，支持 Dark Mode，从操作系统到 App，再到网站，都已经变成一件用户和开发者都有强烈需求去做的事情。</summary></entry><entry><title type="html">用 Docker 运行 Jekyll</title><link href="http://localhost:4000/essays/2018/12/31/jekyll-docker.html" rel="alternate" type="text/html" title="用 Docker 运行 Jekyll" /><published>2018-12-31T00:00:00+08:00</published><updated>2018-12-31T00:00:00+08:00</updated><id>http://localhost:4000/essays/2018/12/31/jekyll-docker</id><content type="html" xml:base="http://localhost:4000/essays/2018/12/31/jekyll-docker.html">&lt;p&gt;很喜欢 Jekyll 这个静态网站生成框架，这个站就是用 Jekyll 做的。但是总感觉 Jekyll 的安装是一件很麻烦的事情。直接安装到 Host OS 上是一种污染环境的方法，而我又不想去花时间研究到底怎样才是管理 Ruby 依赖包的最科学的方式。所以用 Docker 来让这个网站可以在本地跑起来，是最好的方式了。而且 Docker 这样的方式也通吃 macOS 和 Windows。&lt;/p&gt;

&lt;p&gt;首先是获取 Jekyll 的最新 Docker 镜像：&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker pull jekyll/jekyll
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;然后切换到你的 Jekyll 网站所在目录，执行这条命令启动 Jekyll：&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker run &lt;span class=&quot;nt&quot;&gt;--mount&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;bind&lt;/span&gt;,source&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;$(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;pwd&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;)&lt;/span&gt;,target&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/srv/jekyll &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; 4000:4000 &lt;span class=&quot;nt&quot;&gt;--name&lt;/span&gt; blog &lt;span class=&quot;nt&quot;&gt;-it&lt;/span&gt; jekyll/jekyll &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
jekyll serve
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;然后就可以通过 localhost:4000 访问到这个 Jekyll 的动态生成结果了。&lt;/p&gt;

&lt;p&gt;因为我们给这个 Container 赋予了名字 blog，所以之后如果再次需要这个 Container 的话，只需要这样就可以启动：&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker start &lt;span class=&quot;nt&quot;&gt;-i&lt;/span&gt; blog
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;hr /&gt;

&lt;p&gt;参考文档 &lt;a href=&quot;https://github.com/envygeeks/jekyll-docker/blob/master/README.md&quot;&gt;https://github.com/envygeeks/jekyll-docker/blob/master/README.md&lt;/a&gt;&lt;/p&gt;</content><author><name>Livid</name></author><category term="essays" /><summary type="html">很喜欢 Jekyll 这个静态网站生成框架，这个站就是用 Jekyll 做的。但是总感觉 Jekyll 的安装是一件很麻烦的事情。直接安装到 Host OS 上是一种污染环境的方法，而我又不想去花时间研究到底怎样才是管理 Ruby 依赖包的最科学的方式。所以用 Docker 来让这个网站可以在本地跑起来，是最好的方式了。而且 Docker 这样的方式也通吃 macOS 和 Windows。</summary></entry><entry><title type="html">Gran Turismo Sport</title><link href="http://localhost:4000/essays/2018/06/18/gt-sport.html" rel="alternate" type="text/html" title="Gran Turismo Sport" /><published>2018-06-18T00:00:00+08:00</published><updated>2018-06-18T00:00:00+08:00</updated><id>http://localhost:4000/essays/2018/06/18/gt-sport</id><content type="html" xml:base="http://localhost:4000/essays/2018/06/18/gt-sport.html">&lt;p&gt;最近几个月，GT Sport 这款游戏对于我而言，已经不仅是一款游戏，简直就成为某种可以称之为生活方式的事物。此时此刻，当我在书房的电脑上敲打这篇文字的时候，旁边桌子的桌面上就放着 PS4 Pro，上面运行的 GT Sport 提供了房间中变化的光线和音乐。&lt;/p&gt;

&lt;p&gt;我想这可能也是其功能之一——作为房间的背景光和声音。因为 GT Sport 在游戏进入之后，如果你什么都不做的话，那么默认的显示画面就是一个隐去了所有 UI（这样大概可以防止 LED burn-in），然后不停变换的幻灯片。幻灯片的内容包括各种重大的历史事件，及游戏中的各种车在现实中的场景的照片。我猜想大概 Polyphony 公司的入口就会悬挂这样的一块大屏幕，然后只要让其始终运行 GT Sport 的这个 idle 模式即可源源不断地提供各种几乎不会重复的视觉和听觉刺激。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://i.v2ex.co/A75nrs56.jpeg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;视觉肯定是这个游戏最大的一个优点。只要显示硬件支持，游戏可以以 4K HDR 的方式输出。各种颜色和对比度非常不同，确实是一种享受。那个桌面就是我平时写代码的桌面，所以上面的支持 4K HDR 的 Dell U2718Q 一共接了 3 台设备，包括一台 Windows PC 和一台 Mac，及 PS4 Pro。U2718Q 可以自动检测输入信号源，因此只要不是同时开了多台设备的话，那么显示信号是可以自动切换的，非常方便。无论是关闭 PS4 打开 PC，或是关闭 PC 打开了 PS4，然后显示信号就自动进行了切换，中间的几秒的时间对于大脑的上下文切换也恰到好处。而最近 Asus 和 Acer 刚刚推出了支持 144Hz G-Sync 的 4K HDR 显示器，不过还没有在 Micro Center 看到实物，很期待去看看在色彩的表现上是否能够超过 Dell U2718Q。&lt;/p&gt;

&lt;p&gt;然后说说 GT Sport 的音乐。这也是一件让我一直觉得很有趣的事情，就是为什么 Forza 和 Project CARS 2 在菜单和游戏中所选择的音乐都是各种恢弘（或者莫不如说是苦大仇深也可以）的交响乐，而 GT Sport 系列一直在音乐的选择上要更柔和、轻松，或者说 hip。所以我无法接受 Forza 和 Project CARS 系列的一个重要原因或许就是他们的音乐太严肃了。&lt;/p&gt;

&lt;p&gt;虽然这代 GT 提供了增强的在线和 Sport 模式，但是这个游戏目前对于我而言就是一个孤独的，自己和自己较劲的游戏。每天找到一段合适的时间和心情，然后挑战 campaign 中的某个模式，或是试着让自己在 Nurburgring Nordschleife 上单圈时间时间能够减少几秒。&lt;/p&gt;

&lt;p&gt;这种情况下的游戏体验是一种接近于 zen 的体验。你必须忘掉一切，忘掉手机上的 300 个提醒，忘掉白天说错的话，忘掉明天要赴的约，把自己的全部注意力放到游戏中。在这个过程中，满足自己在开始时升起的那个微小的念头，可能是通关 campaign 中的一个模式，或是得到一辆新车，或是减短时间，然后关掉游戏，继续生活。&lt;/p&gt;</content><author><name>Livid</name></author><category term="essays" /><summary type="html">最近几个月，GT Sport 这款游戏对于我而言，已经不仅是一款游戏，简直就成为某种可以称之为生活方式的事物。此时此刻，当我在书房的电脑上敲打这篇文字的时候，旁边桌子的桌面上就放着 PS4 Pro，上面运行的 GT Sport 提供了房间中变化的光线和音乐。</summary></entry><entry><title type="html">Information Ingest</title><link href="http://localhost:4000/essays/2018/05/22/info-ingest.html" rel="alternate" type="text/html" title="Information Ingest" /><published>2018-05-22T00:00:00+08:00</published><updated>2018-05-22T00:00:00+08:00</updated><id>http://localhost:4000/essays/2018/05/22/info-ingest</id><content type="html" xml:base="http://localhost:4000/essays/2018/05/22/info-ingest.html">&lt;p&gt;&lt;strong&gt;你要警惕的是每天你在允许什么样的想法进入你的大脑。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;把每天会接触到的新信息进行一种这样的分类：&lt;/p&gt;

&lt;h2 id=&quot;buy-more&quot;&gt;Buy More&lt;/h2&gt;

&lt;p&gt;各种广告和邮件订阅（无论是主动订阅还是不请自来的），这类信息的目的就是促使你去买更多。成熟的消费品公司会大致每年推出一代新产品，他们会尽一切手段去让你知道这些新产品的存在，促使你去买。买了之后可能生活中会产生一些有趣的变化，也可能不会。如果不用担心钱，每天看到新东西就下单，然后生命就消耗在拆快递和体验这整个过程中多巴胺分泌的尖峰时刻。买更多是一件会让熵升高的事情。&lt;/p&gt;

&lt;h2 id=&quot;create-more&quot;&gt;Create More&lt;/h2&gt;

&lt;p&gt;各种教程和经验分享，帮助你在未来有更强大的能力去创造更多。看教程可能是一件枯燥也可能兴奋无比的事情。这是我应当花时间最多的方面。虽然新事物被创造出来之后能够产生的影响是充满极大的不确定性的，但是作为人生的生活方式选择，个人觉得是首选。&lt;/p&gt;

&lt;h2 id=&quot;reduce-entropy&quot;&gt;Reduce Entropy&lt;/h2&gt;

&lt;p&gt;有一类独特但是少见的信息启发你去减少生活中的混乱。冥想，断舍离，过犹不及，每天丢掉一些东西，每天从手机上删掉一个 App。如果不对持续自然增长的混乱有所觉知，就必然会被这样的混乱所吞噬。&lt;/p&gt;

&lt;h2 id=&quot;boredom&quot;&gt;Boredom&lt;/h2&gt;

&lt;p&gt;除此之外的都是无聊。人当然有无聊的自由。&lt;/p&gt;

&lt;p&gt;Non-judgement allows for instant inner peace.&lt;/p&gt;

&lt;p&gt;如若不然，参照前三条。&lt;/p&gt;</content><author><name>Livid</name></author><category term="essays" /><summary type="html">你要警惕的是每天你在允许什么样的想法进入你的大脑。</summary></entry><entry><title type="html">Reconnect</title><link href="http://localhost:4000/essays/2018/05/18/reconnect.html" rel="alternate" type="text/html" title="Reconnect" /><published>2018-05-18T00:00:00+08:00</published><updated>2018-05-18T00:00:00+08:00</updated><id>http://localhost:4000/essays/2018/05/18/reconnect</id><content type="html" xml:base="http://localhost:4000/essays/2018/05/18/reconnect.html">&lt;p&gt;最近终于找到了一些时间和精力，来把自己的个人博客网站进行一些整理。&lt;/p&gt;

&lt;p&gt;在 18 到 23 岁之间的几年，自己曾经是非常活跃的 weblogging 写作者。而后来因为生活中的一些巨大变动——换城市生活，然后换国家生活，于是写作，或者说这样子随心的写作，停止了下来。那些必须写和回复的电子邮件，在这期间倒是一直未停。&lt;/p&gt;

&lt;p&gt;那么我应该在这些说一些什么好呢？还是说一些开心的事情吧。向大家更新一下，自己最近觉得很享受的一些事情。&lt;/p&gt;

&lt;h2 id=&quot;pillars-of-eternity&quot;&gt;Pillars of Eternity&lt;/h2&gt;

&lt;p&gt;Baldur’s Gate 刚出来时，我还在上初中。后来 Baldur’s Gate 2 出来时，我换了一台新电脑，高中生活刚刚开始。当年虽然在这两款游戏，及 Icewind Dale 中都进行了相当一番探索，但是终究没有能够通关。游戏中巨大的全英文文字量也是没有能够通关的主要原因。但是毫无疑问，这个系列的游戏在我的青春期留下了深刻的痕迹。&lt;/p&gt;

&lt;p&gt;而他们的开发者在&lt;a href=&quot;https://en.wikipedia.org/wiki/Obsidian_Entertainment&quot;&gt;几经变故&lt;/a&gt;之后，通过在 &lt;a href=&quot;https://www.kickstarter.com/projects/obsidian/project-eternity&quot;&gt;Kickstarter 上众筹&lt;/a&gt;的方式，推出了 Pillars of Eternity。这款游戏因为其中的英文词汇和文本量的巨大，而在玩家群体中荣获了「专八之柱」的称号。&lt;/p&gt;

&lt;p&gt;最近时不时会打开 Pillars of Eternity 玩几个场景。2 代已经在 2018 年 5 月 8 日发售，而我打算把 1 代通关之后再去开始玩 2 代。而通关的 1 代的最大动力也是难点就是英语。虽然已经在美国生活了几年，英语略有长进，但是如果要挑战比较艰深的英语文学作品，那还是需要付出一些额外努力的。&lt;/p&gt;

&lt;p&gt;关于英语，这是我目前在用的一些工具：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.vocab.com/&quot;&gt;Vocab.com&lt;/a&gt;: 这个网站的团队为很多复杂的英语单词写了具有独创性的解释。&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://knudge.me/&quot;&gt;Knudge.me&lt;/a&gt;: 这个 App 会每隔一段时间在手机上向你推送一个单词的解释。App 内提供了几个有趣的帮助你记住单词拼写和含义的游戏。&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://play.google.com/store/apps/details?id=com.rishabhk.vocabbuilder&quot;&gt;Vocabulary Builder&lt;/a&gt;: 一个 Android 上的 App。每天推送一个有意思的复杂单词的解释。比如 &lt;a href=&quot;https://en.wikipedia.org/wiki/Petrichor&quot;&gt;Petrichor&lt;/a&gt; 这个词我就是第一次从这个 App 中学到的。&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://itunes.apple.com/cn/app/id353115739?mt=8&quot;&gt;网易有道词典&lt;/a&gt;: 在试验了很多不同的 App 之后，目前选定了网易有道词典作为英中解释的查询工具。&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.memrise.com/&quot;&gt;Memrise&lt;/a&gt;: 目前在用 Memrise 学习日语和德语。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;无论是多么陌生的单词，如果能够用多种方式看到不同来源对其的解释，能够在邮件里用过几次，那么自然就会越来越熟悉。&lt;/p&gt;

&lt;p&gt;如果我能够用这样的方式把 Pillars of Eternity 1 代通关，然后将来可以几乎不用查字典地通关 2 代，那一定会是很奇妙的体验。&lt;/p&gt;

&lt;h2 id=&quot;blender&quot;&gt;Blender&lt;/h2&gt;

&lt;p&gt;有时候我会想，如果有机会让我重新点选自己的技能树的话，我或许会把所有的点数放到下面的 4 个技能上：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;3D 软件&lt;/li&gt;
  &lt;li&gt;英语&lt;/li&gt;
  &lt;li&gt;日语&lt;/li&gt;
  &lt;li&gt;数学&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;各种 3D 软件是我从初中开始就一直都有的爱好。只是目前的工作内容并不是这方面。所以我对于 3D 软件依然抱有单纯而美好的想象（或许如果真的变成工作了的话就不是这样的感觉了）。&lt;/p&gt;

&lt;p&gt;最近最大的愿望就是希望能够把下面关于 Blender 的这个教程系列看完：&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.youtube.com/playlist?list=PLa1F2ddGya_8V90Kd5eC5PeBjySbXWGK1&quot;&gt;Blender Fundamentals&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;然后，用 Blender 做一只栩栩如生的 Synodontis：&lt;/p&gt;

&lt;div class=&quot;video-responsive&quot;&gt;&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/HOAyJJb0gqw&quot; frameborder=&quot;0&quot; allow=&quot;autoplay; encrypted-media&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;

&lt;p&gt;这件事情能有什么意义呢？这件事情的意义就在于我需要将自己的生活优化到我能够用一天当中最好的那部分精力去在尽可能短的时间内完成这个目标。&lt;/p&gt;

&lt;h2 id=&quot;得到&quot;&gt;得到&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://twitter.com/jason5ng32&quot;&gt;@jason5ng32&lt;/a&gt; 有一次来南加州，于是我们约了见面和火锅。晚饭之后的闲聊中，我丢了这样的一个问题给他：&lt;/p&gt;

&lt;p&gt;“在简体中文互联网上，是否有任何网站的评论区是能看的？”&lt;/p&gt;

&lt;p&gt;原话如此，现在看来或许有些偏激。&lt;/p&gt;

&lt;p&gt;而 Jason 说：“有啊，得到。上面的订阅专栏的用户都是花了钱之后来评论的，质量有保证。”&lt;/p&gt;

&lt;p&gt;那是我第一次听说&lt;a href=&quot;https://www.igetget.com/&quot;&gt;得到&lt;/a&gt;。然后在上面订阅了不少专栏。&lt;/p&gt;

&lt;p&gt;现在，只要是自己需要一个人开车出行的时候，坐上车之后第一件事情就是在得到里选定要听的专栏或者书。可以这么说，因为有得到 App 的存在，我现在对于长时间开车（大于 30 分钟，小于 2 个小时）这件事情甚至有了几分期待，因为这样意味着我可以有一整块的时间用听的方式享受那种新信息持续刺激大脑的快感。&lt;/p&gt;

&lt;p&gt;其中&lt;a href=&quot;https://m.igetget.com/share/column/cid/34&quot;&gt;武志红老师的心理学课&lt;/a&gt;，是我每周最期待的更新。我时常在想，如果当年我还是一个婴儿时，我的父母能够有机会接触到这样的信息的话，我现在的人生或许会有很大的不同。&lt;/p&gt;</content><author><name>Livid</name></author><category term="essays" /><summary type="html">最近终于找到了一些时间和精力，来把自己的个人博客网站进行一些整理。</summary></entry><entry><title type="html">Google AdSense 生态圈里的 3 种创收方式</title><link href="http://localhost:4000/essays/2018/05/18/adsense-methods.html" rel="alternate" type="text/html" title="Google AdSense 生态圈里的 3 种创收方式" /><published>2018-05-18T00:00:00+08:00</published><updated>2018-05-18T00:00:00+08:00</updated><id>http://localhost:4000/essays/2018/05/18/adsense-methods</id><content type="html" xml:base="http://localhost:4000/essays/2018/05/18/adsense-methods.html">&lt;p&gt;作为 Google 的重度用户，这是我在过去几年每天的使用体验中发现和总结的，在英文网络世界中最常见，也最有效的 3 种通过特定的信息收集模式进行创收的方式。&lt;/p&gt;

&lt;p&gt;首先需要明确的是，这里讨论的，并不是那些浪费用户时间的，堆积无效信息垃圾的邪恶手段。而是通过选题和技术手段，确确实实把一类本来无序的信息变得更加有序，从而产生更大的价值。Google 的搜索引擎本身就是这样的一种模式。&lt;/p&gt;

&lt;h2 id=&quot;对未上市产品的信息收集&quot;&gt;对未上市产品的信息收集&lt;/h2&gt;

&lt;p&gt;大部分成熟的、大型的、生产消费品的欧美公司，都会在每年的固定时间发布一款新产品。比如 Apple 的 macOS 和 iPhone，Activision 的 Call of Duty 新作，TaylorMade 的新高尔夫球杆，BMW 的新车等等。&lt;/p&gt;

&lt;p&gt;这类会在未来的某个时间点发布的新产品，会有数百万乃至数千万的人报以强烈的期待。因此产生的搜索流量也就相当可观。&lt;/p&gt;

&lt;p&gt;于是就有这样的一类文章，做法是把关于某个未正式上市产品的所有信息收集到一起，然后用“ Things we know so far about ”这样的标题。比如这里有两个关于 Surface Book 3 的例子，也是目前（ 2018 年 5 月 1 日）当你在 Google 里搜索 Surface Book 3 时会出现在最前面的结果：&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.t3.com/features/surface-book-3&quot;&gt;https://www.t3.com/features/surface-book-3&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.techradar.com/news/surface-book-3&quot;&gt;https://www.techradar.com/news/surface-book-3&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;文章中会出现一些特定的词组，比如：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Surface Book 3 release date&lt;/li&gt;
  &lt;li&gt;Surface Book 3 price&lt;/li&gt;
  &lt;li&gt;Surface Book 3 specs&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;这类词组都会在产品正式上线之前捕获大量的搜索流量。&lt;/p&gt;

&lt;h2 id=&quot;top-n-列表&quot;&gt;Top N 列表&lt;/h2&gt;

&lt;p&gt;这是一种在网站和 YouTube 里都特别常见但也很有效的方式。比如：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;PS2 时代最好的 10 个 RPG 游戏&lt;/li&gt;
  &lt;li&gt;SNES 上最难的 10 个游戏&lt;/li&gt;
  &lt;li&gt;2018 年最好的 10 套高尔夫铁杆组&lt;/li&gt;
  &lt;li&gt;向水族入门爱好者推荐的 10 种热带鱼&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;为什么人们会爱看这类的文章或者视频呢？这是我推测的几个原因：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;在紧凑的时间内塞下大量的信息。如果是你感兴趣的一类信息，那么大脑在这个持续受刺激的过程中会觉得非常爽。比如我曾经看过这样的一个视频 &lt;a href=&quot;https://www.youtube.com/watch?v=9aAsqUkTKLs&quot;&gt;https://www.youtube.com/watch?v=9aAsqUkTKLs&lt;/a&gt; 内容是 SNES 上所有的游戏的过程演示。&lt;/li&gt;
  &lt;li&gt;人都希望能够在短时间内迅速掌握一件事物。因此如果有这样的文章或者视频，可以让人在看完之后产生我已经快速了解了全貌的感觉，看的人会很爽。&lt;/li&gt;
  &lt;li&gt;这类文章或者视频的元信息中可以匹配到大量的关键词。因此很容易会出现在各种搜索结果中。&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;排列组合&quot;&gt;排列组合&lt;/h2&gt;

&lt;p&gt;当你决定要买一件东西时，你心中可能还有另外一个备选选项，于是你就会在搜索引擎中使用“ A vs B ”这样的方式来试图比较两个产品之间的差异。&lt;/p&gt;

&lt;p&gt;因为这样的需求是如此普遍，除了大量的网站在做这样的内容之外，甚至 Google 自己就会提供这样的快速结果。比如这是当你在 Google 里输入“ iPhone X vs iPhone 8 ”时会看到的：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://i.v2ex.co/1PR8BYLE.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;上面的这个表格会直接显示在 Google 的搜索结果最顶端。而不需要跳转到任何其他网站。如果不是因为搜索量太过于巨大，想必 Google 也不至于专门去做这样的优化。&lt;/p&gt;

&lt;p&gt;而另外一类，就是任意两个关键词之间的排列组合，比如这里的一个例子：&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://gpu.userbenchmark.com/Compare/Nvidia-GTX-1060-6GB-vs-AMD-RX-580/3639vs3923&quot;&gt;UserBenchmark: NVIDIA GTX 1060 vs AMD RX 580&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;这个页面比较了 GeForce GTX 1060 和 AMD RX 580 这两个在性能和价格上都非常接近的产品。而越是接近的产品，用户在购买的时候也就越纠结，从而也就会产生越多的搜索流量。而这个网站支持让你比较任意两种 GPU 或者其他硬件之间的差异。&lt;/p&gt;</content><author><name>Livid</name></author><category term="essays" /><summary type="html">作为 Google 的重度用户，这是我在过去几年每天的使用体验中发现和总结的，在英文网络世界中最常见，也最有效的 3 种通过特定的信息收集模式进行创收的方式。</summary></entry><entry><title type="html">在 UniFi 设备上使用 IPv6 的体验</title><link href="http://localhost:4000/essays/2018/04/21/ipv6-unifi.html" rel="alternate" type="text/html" title="在 UniFi 设备上使用 IPv6 的体验" /><published>2018-04-21T00:00:00+08:00</published><updated>2018-04-21T00:00:00+08:00</updated><id>http://localhost:4000/essays/2018/04/21/ipv6-unifi</id><content type="html" xml:base="http://localhost:4000/essays/2018/04/21/ipv6-unifi.html">&lt;p&gt;最近对家里的网络做了一次升级，用上了 Native IPv6。这里分享一下过程和体验。&lt;/p&gt;

&lt;p&gt;ISP 是南加州的某大型 cable Internet 公司，他们针对家庭宽带用户的服务目前已经完全支持 IPv6，因此只要家里的设备也支持并且配置正确的话，过程是很简单的。&lt;/p&gt;

&lt;p&gt;我用的是全套的 UniFi 设备：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;1 个 UniFi Security Gateway&lt;/li&gt;
  &lt;li&gt;2 个 AC HD&lt;/li&gt;
  &lt;li&gt;2 个 USW-8-150W 和 1 个 USW-16-150W&lt;/li&gt;
  &lt;li&gt;1 个 AC In-Wall Pro&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;UniFi Controller 是跑在一个 UniFi Cloud Key 上。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://i.v2ex.co/lD23fqmw.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;这里的一个关键是 UniFi Controller 软件最近的一次升级，具体可见这里：&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://community.ubnt.com/t5/UniFi-Updates-Blog/UniFi-5-7-20-Stable-has-been-released/ba-p/2271529&quot;&gt;UniFi 5.7.20 Stable Release Notes&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;在 5.7.20 版本中提供了对 IPv6 的支持，使得打开 IPv6 非常简单——只需要在 2 个地方点一下鼠标即可。&lt;/p&gt;

&lt;p&gt;第一步是在 USG 的 WAN 设置中打开 IPv6，类似下面这样：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://i.v2ex.co/w3FYH53Y.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;第二步是在 UniFi Controller 的 Settings / Networks 里为 LAN 打开 IPv6。只要在 IPv6 Interface Type 那里选 Prefix Delegation 即可，其他什么都不用改：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://i.v2ex.co/ubd77h74.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;以上两步完成之后，网络里的设备就会获得 IPv6 的地址。比如 macOS 的话，可以把 WiFi 关掉又打开一次，就可以获得 IPv6 地址了。之后 macOS 在对外通信的时候，会优先使用 IPv6 网络。&lt;/p&gt;

&lt;p&gt;这个时候如果访问 bgp.he.net 就可以看到自己的 IPv6 地址。这就是 IPv6 有意思的一点——在 Native IPv6 网络里，你的 IPv6 地址就是公网地址，如果没有任何防火墙规则的话，别人是可以直接连上你的 IPv6 地址的。也就是说，我上面那几步做完之后的效果就是，&lt;strong&gt;家里每一台支持 IPv6 的设备，都有了自己的公网地址&lt;/strong&gt;。比如如果我在家里测试 V2EX 的开发版本，我可以直接把我本地机的 IPv6 地址加端口发给朋友，朋友就可以访问了。&lt;/p&gt;

&lt;p&gt;这样听起来很不安全对不对？其实还好，因为 USG 默认防火墙规则的存在，使得虽然这些设备都有了公网地址，但是外面是无法连上这些设备的。&lt;/p&gt;

&lt;p&gt;如果你希望把整个网络对外打开（&lt;strong&gt;不推荐这么做&lt;/strong&gt;），那么最简单的方法就是在 UniFi Controller 的 Settings / Routing &amp;amp; Firewall / Firewall / Rules IPv6 里为 WAN-IN 添加一条这样的规则：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://i.v2ex.co/269Vb0oo.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;当然，更安全的做法是，添加一些你确实需要的，同时又有足够安全考虑的规则。&lt;/p&gt;

&lt;p&gt;比如你可以在 WAN-IN 里添加允许 ICMPv6，这样的效果是，外面可以 ping 所有的设备：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://i.v2ex.co/EQQxM3j0.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;这里推荐一个可以测试你的 IPv6 网络类型的网站：&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://ipv6-test.com/&quot;&gt;IPv6 Test&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;然后发现，任何的动态网站，如果要提供 IPv6 支持，有一些细节是需要改的。比如如果之前数据库里某张表有一个 ip 字段规划为了 varchar(15) 或者 int 的话，那么就是一个需要改的坑了。&lt;/p&gt;</content><author><name>Livid</name></author><category term="essays" /><summary type="html">最近对家里的网络做了一次升级，用上了 Native IPv6。这里分享一下过程和体验。</summary></entry><entry><title type="html">iDogma 2016</title><link href="http://localhost:4000/essays/2015/11/09/idogma-2016.html" rel="alternate" type="text/html" title="iDogma 2016" /><published>2015-11-09T00:00:00+08:00</published><updated>2015-11-09T00:00:00+08:00</updated><id>http://localhost:4000/essays/2015/11/09/idogma-2016</id><content type="html" xml:base="http://localhost:4000/essays/2015/11/09/idogma-2016.html">&lt;p&gt;Remember, the &lt;strong&gt;only thing&lt;/strong&gt; before everything, is to have a dogma. A dogma is a list consists by DOs and DONTs. You make it, stick to it while adapt it to reality, question yourself from time to time: is everything on the list mutually exclusive and collectively exhausive?&lt;/p&gt;

&lt;p&gt;And there is a meta dogma for dogmas:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Avoid emotional tactics&lt;/li&gt;
  &lt;li&gt;Every kindness counts&lt;/li&gt;
  &lt;li&gt;Gentleness is the ultimate strength&lt;/li&gt;
&lt;/ul&gt;</content><author><name>Livid</name></author><category term="essays" /><summary type="html">Remember, the only thing before everything, is to have a dogma. A dogma is a list consists by DOs and DONTs. You make it, stick to it while adapt it to reality, question yourself from time to time: is everything on the list mutually exclusive and collectively exhausive?</summary></entry><entry><title type="html">V2EX 从过去一年半中学到的几件事</title><link href="http://localhost:4000/essays/2013/09/15/v2ex-lessons.html" rel="alternate" type="text/html" title="V2EX 从过去一年半中学到的几件事" /><published>2013-09-15T00:00:00+08:00</published><updated>2013-09-15T00:00:00+08:00</updated><id>http://localhost:4000/essays/2013/09/15/v2ex-lessons</id><content type="html" xml:base="http://localhost:4000/essays/2013/09/15/v2ex-lessons.html">&lt;p&gt;2012 年三月末时，启动了一个计划，用一个月的时间，把 &lt;a href=&quot;http://www.v2ex.com/&quot;&gt;V2EX&lt;/a&gt; 从当时的服务商 Google App Engine 中迁出，因为当时 Google App Engine 的一些疯狂价格调整已经进行了半年。关于这次迁移，可以具体看 &lt;a href=&quot;/essays/2012/04/25/v2ex-2to3/&quot;&gt;V2EX 2to3&lt;/a&gt; 这篇文章。&lt;/p&gt;

&lt;p&gt;而现在已经过去一年半，V2EX 依然存在，并且各项数值也都有所发展。而在这一年半的运转过程中，我也得到了很多新的教训。我打算在这里稍微谈谈这些教训，虽然这些教训，或许对于那些已经参与过大型网站项目的人都没什么新鲜的，我只能希望这篇东西能够尽量有用吧。&lt;/p&gt;

&lt;h3 id=&quot;首页时间轴&quot;&gt;首页时间轴&lt;/h3&gt;

&lt;p&gt;随着注册用户增多（虽然比起那些更大型的网站，我们的增长只是人家的一个零头），网站的首页时间轴就越来越成为一个瓶颈。在网站早期，因为注册用户们的志趣大多接近，所以首页时间轴大部分时候是小而美的。而发展至今，我们不得不把首页时间轴进行拆分，拆成了几大不同模块，默认呈现的是 &lt;a href=&quot;http://www.v2ex.com/?tab=tech&quot;&gt;技术&lt;/a&gt; 模块。而实际上大部分登录用户，去的是 &lt;a href=&quot;http://www.v2ex.com/?tab=all&quot;&gt;全部&lt;/a&gt; 模块。&lt;/p&gt;

&lt;p&gt;一个好的首页时间轴应该是怎样的？这是一个开放而无解的问题。&lt;/p&gt;

&lt;p&gt;如果把一个以内容和交互为主的网站比作一本杂志的话，首页时间轴所呈现的内容应该基本体现的是杂志的主题。&lt;/p&gt;

&lt;p&gt;我不太看好通过算法算出来的时间轴，因为在我们这个领域，内容的多样性恐怕永远都不会丰富到 Amazon 那样的程度。&lt;/p&gt;

&lt;p&gt;而如果首页只呈现自己关注的人的内容，那么这条时间轴只会越来越无聊，内容的多样性也会越来越小。&lt;/p&gt;

&lt;p&gt;或许，终极解决方案还是在于解答终极问题：这个网站到底能够带来什么价值？&lt;/p&gt;

&lt;p&gt;我不希望 V2EX 成为无聊经济的一部分，我希望这个网站上的绝大部分信息能够有用。从专业领域来说，我希望 V2EX 上的信息会是关于软件和硬件的新进展。同时因为这里聚集了一群能够把事情搞定的人，所以围绕这个人群的信息服务，比如招聘和二手交易，也是有意义的。&lt;/p&gt;

&lt;h3 id=&quot;mysql-or-redis&quot;&gt;MySQL or Redis&lt;/h3&gt;

&lt;p&gt;如果下次要开始一个像 V2EX 这样的网站项目，我会尽量从技术选择中把 MySQL 去掉。&lt;/p&gt;

&lt;p&gt;作为一种存储数据的方式，MySQL 很成熟，其本身和大部分第三方库都已经存在了十年以上。尤其是在配合一些 ORM 使用时，MySQL 很简单。&lt;/p&gt;

&lt;p&gt;但问题在于当数个表的数据量突破 100 万行，页面上同时需要读取的动态数据增多时，要将单个页面的生成性能优化到 100ms 以下就会变得越来越复杂。如果你有很多台双 8 核 CPU / 64G 内存的服务器，你或许会更晚遇到这些性能问题，但是随着网站规模变大，为了优化和 MySQL 有关的操作而付出的代价只会越来越大。&lt;/p&gt;

&lt;p&gt;那如果有一天网站上有很多张表都有上亿行数据时，整个架构恐怕就需要重新思考。&lt;/p&gt;

&lt;p&gt;Instagram 的技术团队在 &lt;a href=&quot;http://techcrunch.com/2012/04/12/how-to-scale-a-1-billion-startup-a-guide-from-instagram-co-founder-mike-krieger/&quot;&gt;Scaling Instagram&lt;/a&gt; 这个幻灯片中分享了很多有用的技巧，其中一条就是大量使用 &lt;a href=&quot;http://redis.io/&quot;&gt;Redis&lt;/a&gt; 来解决问题。Redis 并不只是一个简单的 KV 数据库，它的各种功能其实足够用于构建一个像 V2EX 这样具有大量动态数据交互的网站：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;非常适合存储时间轴的 Sorted Set / List 类型&lt;/li&gt;
  &lt;li&gt;非常容易进行数据复制和读写分离&lt;/li&gt;
  &lt;li&gt;如果要上新的数据类型，不需要经历 ALTER TABLE 时纠结的锁表&lt;/li&gt;
  &lt;li&gt;网站部署新功能时，不需要考虑如何 migrate 数据库的表结构&lt;/li&gt;
  &lt;li&gt;和 Memcached 几乎一样好的性能，但是支持更多的数据类型，同时也没有 Memcached 的 1MB 单块数据容量限制&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;同时最关键的：性能。Redis 可以在单台服务器上实现每秒数万次的读取和写入，并且因为其非常容易实现复制和读写分离，所以如果要加入更多硬件，也会比较简单。&lt;/p&gt;

&lt;h3 id=&quot;防攻击&quot;&gt;防攻击&lt;/h3&gt;

&lt;p&gt;动态网站的各种脆弱面，是很多教你如何编程的书中不会涉及的，这些编程类书籍中，通常只会教你一些最基本的 CRUD，及有限的性能优化。一些好的框架中会有一些这方面的考虑，但是如果你对各种攻击没有概念，那么你其实也很难把框架中的防攻击功能用好。&lt;/p&gt;

&lt;p&gt;举个例子，如果登录页面上对尝试登录的次数没有限制的话，那么攻击者就可以不停地尝试，直到发现一个正确的密码。而如果用户用了弱密码，那么或许这个密码很快就可以被尝试出来。&lt;/p&gt;

&lt;p&gt;而另外一个例子是，如果所有的 POST 请求，不去检测发起者究竟是真实用户还是机器，那么网站很可能瞬间就被各种用程序发出的修空调或是网络赚钱的垃圾给填满了。&lt;/p&gt;

&lt;p&gt;又比如，如果一个新账号，在注册完毕后，马上就开始发布大量重复的内容，那么只会有一种可能——Spammer。&lt;/p&gt;

&lt;p&gt;这种事情如果经常发生，那么用户就会对这个网站逐渐失去兴趣。&lt;/p&gt;

&lt;p&gt;所以，一种最基础的保护方式就是，对于所有的涉及数据写入的页面，比如所有的 POST/PUT 请求，都应该有频次限制机制。如果是针对 IP 来做这样的限制的话，可以用 Redis 来实现计数。用 timestamp + IP + 页面的 URI 来作为 key，每有一次访问 value 就 +1，如果在特定的 timestamp 内访问的次数超过限制，就可以禁止这个 IP 在接下来一段时间的后续访问。限制访问的机制同样可以借助 Redis，比如在所有的请求的构造函数中，检查 deny:1.2.3.4 这个 key 是否存在，如果存在，就拒绝 1.2.3.4 的访问。因为 Redis 可以为每个 key 设置 TTL，所以如果你为 deny:1.2.3.4 设置了 3600 的 TTL，那么也就可以实现在 1 个小时内拒绝这个 IP 对于站点内任何动态页面的访问。&lt;/p&gt;

&lt;p&gt;这样的保护方式也可以适用于 API 的频次限制，或是保护一些生成代价比较大的页面不被 flood。&lt;/p&gt;

&lt;p&gt;上面讨论的是应用层面的攻击，而另外一类攻击就是协议层面的攻击，比如 UDP Flood 和 SYN Flood 之类。对于这类攻击，如果只靠调整 iptables 和内核的一些参数，基本上是无济于事的。应对这类攻击你需要的是机房的基础设施。如果机房本身有比如 Juniper 或是华为的防火墙设备，那么像 SYN Flood 这样的最基础的攻击方式，应该是机房层面就可以自动帮你过滤掉的。只是可惜的是，很多 VPS 和 Colo 提供商在机房里只放了一些最基础的网络设备，当这类攻击到来时，他们能做的就是停服务或者拔网线。&lt;/p&gt;

&lt;p&gt;把网站放到 CDN 背后也是一个办法，这样当攻击来时，首先遇到的是 CDN 的服务器。不同的 CDN 厂商在防攻击这件事情上能做到的程度不同，如果预算充足的话可以考虑 &lt;a href=&quot;http://www.akamai.com/&quot;&gt;Akamai&lt;/a&gt; 的 &lt;a href=&quot;http://www.akamai.com/html/solutions/kona-solutions.html&quot;&gt;KONA&lt;/a&gt;，如果没有预算的话，就用 &lt;a href=&quot;http://www.incapsula.com/&quot;&gt;Incapsula&lt;/a&gt; 吧。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.cloudflare.com/&quot;&gt;CloudFlare&lt;/a&gt; 也是一个经常被谈论起的方案，但是这个方案要求你将整个域名的管理，即 NS 也托管到他们。但是如果你需要的某种 DNS 功能 CloudFlare 不提供怎么办？这就是这个方案的纠结之处。&lt;/p&gt;

&lt;p&gt;说到 DNS，一个确实值得推荐的方案就是 &lt;a href=&quot;http://dyn.com/dns/business/&quot;&gt;DynECT Managed DNS&lt;/a&gt;。Dyn 建了一个由全世界接近 20 个数据中心构成的 Anycast 网络，这样可以保证你的域名在全世界大部分地区的初次解析耗时都在 100ms 以下，甚至 40ms 以下。同时，如果有人想攻击你的 NS 的话，Dyn 的 NS 被打下的难度也是比较大的。目前 V2EX 在用就是 Dyn 的 NS。&lt;/p&gt;

&lt;h3 id=&quot;虚拟化和自动化&quot;&gt;虚拟化和自动化&lt;/h3&gt;

&lt;p&gt;自从发现了 &lt;a href=&quot;http://www.vagrantup.com/&quot;&gt;Vagrant&lt;/a&gt; 这个工具的存在，我就几乎每天都在用。&lt;/p&gt;

&lt;p&gt;简单来说，Vagrant 可以让你用一个文本文件 Vagrantfile 描述一个虚拟机环境，然后根据你的描述启动这样的一台虚拟机，同时将 Vagrantfile 所在的目录的所有内容，和虚拟机中的 /vagrant 这个目录自动实时同步。&lt;/p&gt;

&lt;p&gt;这样的工具的最大好处，就是让你可以在 Mac OS X 上获得一个轻量级的 Linux 环境，你可以将这台 Linux 虚拟机配置得尽可能接近你的实际 production 环境。从而在每天的开发和测试中，尽量避免因为本地 OS X 和线上 Linux 环境不同而造成的 bug。&lt;/p&gt;

&lt;p&gt;Vagrant 可以使用几种不同的技术来启动虚拟机，包括 VirtualBox，VMware，KVM，AWS 和 LXC。而其中 &lt;a href=&quot;https://www.virtualbox.org/&quot;&gt;VirtualBox&lt;/a&gt; 是默认的方式，也是免费的方式。而如果要使用 VMware 来作为后端的话，除了需要购买 VMware Workstation 或 Fusion 外，还需要从 Vagrant 开发者那里购买一个售价为 $79 的闭源插件。我买过这个插件，但是在实际用起来的时候遇到过很多问题，比如在网络方面和 VirtualBox 就不太相同，因此 Vagrantfile 其实没法在两个插件间完全无问题的复用。这也是一直以来很多人在争论的一个问题：开源软件和闭源软件究竟哪个质量更好？而从 Vagrant 的这个例子来看，因为免费且开源，从而有更多用户的 VirtualBox 插件，在质量上，是大大胜过用户要少得多的 VMware 插件。&lt;/p&gt;

&lt;p&gt;Vagrant 还支持的另外一个有用特性，就在虚拟机每次启动时执行一个 Puppet Manifest。这样你就可以在这个 Puppet Manifest 中进一步描述你需要的软件包 / 服务 / 目录 / 文件，从而省掉很多绝无必要的敲键盘时间。&lt;/p&gt;

&lt;p&gt;我在过去一年的大量项目中使用了 &lt;a href=&quot;http://www.puppetlabs.com/&quot;&gt;Puppet&lt;/a&gt;。Puppet 是一个复杂的系统，其核心是一门描述机器状态的语言。你可以用这门语言描述你想要一台机器上应该有的软件包、服务、目录、文件和用户等资源的状态，然后 Puppet 在每次运行时，就会检查这台机器的实际状态和你的描述之间的区别，如果存在不同，Puppet 就会进行一些必要的更改，以保证机器状态符合你的描述。&lt;/p&gt;

&lt;p&gt;Puppet 是一个得到了 Google，Cisco，VMware 等公司投资的创业项目，其商业模式就是提供 Enterprise 版本的付费支持，根据你部署机器数量，每台机器大概每年 $99 到 $159 之间。&lt;/p&gt;

&lt;p&gt;和 Puppet 类似的项目还有 &lt;a href=&quot;http://www.opscode.com/chef/&quot;&gt;Chef&lt;/a&gt; 和 &lt;a href=&quot;http://saltstack.com/&quot;&gt;Salt&lt;/a&gt;，选择誰，不选择誰，很容易就变成没有结论的宗教问题。这个时候其实可以到 Google Trends 里对比一下搜索量，或是看看他们各自的 Customer 名单，然后你就会有结论。&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;本文讨论地址 › &lt;a href=&quot;http://www.v2ex.com/t/82642&quot;&gt;http://www.v2ex.com/t/82642&lt;/a&gt;&lt;/p&gt;</content><author><name>Livid</name></author><category term="essays" /><category term="V2EX" /><summary type="html">2012 年三月末时，启动了一个计划，用一个月的时间，把 V2EX 从当时的服务商 Google App Engine 中迁出，因为当时 Google App Engine 的一些疯狂价格调整已经进行了半年。关于这次迁移，可以具体看 V2EX 2to3 这篇文章。</summary></entry><entry><title type="html">28</title><link href="http://localhost:4000/diaries/2013/05/20/28.html" rel="alternate" type="text/html" title="28" /><published>2013-05-20T00:00:00+08:00</published><updated>2013-05-20T00:00:00+08:00</updated><id>http://localhost:4000/diaries/2013/05/20/28</id><content type="html" xml:base="http://localhost:4000/diaries/2013/05/20/28.html">&lt;p&gt;从大概 17 岁开始，我一本不漏地看完了林少华翻译的所有的村上春树的小说。早期的上海译文出版社的版本，每一本的前面都会有林少华写的一篇关于村上春树的介绍，大概十几页，而我对其中提到的一点一直印象深刻，甚至于可以算得上是很多年都一直耿耿于怀，念念不忘——村上春树在 28 岁时写出了他的第一本小说《且听风吟》，而后又过了几年，他就关掉了他的爵士乐酒吧，开始成为专职作家。&lt;/p&gt;

&lt;p&gt;28 岁。&lt;/p&gt;

&lt;p&gt;而再过十天，我也就满 28 岁了。而现在的自己是一个什么状态呢？正坐在一趟从洛杉矶去斯德哥尔摩的航班上。去斯德哥尔摩的航班是五月初在北京订的，上周一个人在旧金山待了几天，参加了 Google I/O 2013，然后从旧金山回到洛杉矶，在 LAX 的新的 International Terminal 等了几个小时，这个全新的 Terminal 还几乎没有商店和餐厅，Wi-Fi 倒是极快，插座上甚至都直接提供 USB 接口了。然后从 LAX 登上这班中途会在慕尼黑转机的航班，因为从美国到斯德哥尔摩没有直飞。&lt;/p&gt;

&lt;p&gt;一个人的漫长旅行。而类似这样的旅行，从去年 PB3 上线之后，就开始了。而我预感我接下来还会去更多的地方，只是我不知道会是哪。这种每年都愈加增长的巨大不确定感让我既觉得开心也觉得无力。因为我始终无法在一个地方待太久，就又出发了。&lt;/p&gt;</content><author><name>Livid</name></author><category term="diaries" /><category term="Livid" /><summary type="html">从大概 17 岁开始，我一本不漏地看完了林少华翻译的所有的村上春树的小说。早期的上海译文出版社的版本，每一本的前面都会有林少华写的一篇关于村上春树的介绍，大概十几页，而我对其中提到的一点一直印象深刻，甚至于可以算得上是很多年都一直耿耿于怀，念念不忘——村上春树在 28 岁时写出了他的第一本小说《且听风吟》，而后又过了几年，他就关掉了他的爵士乐酒吧，开始成为专职作家。</summary></entry></feed>